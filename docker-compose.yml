version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agrisupply_postgres
    environment:
      POSTGRES_DB: agrisupply_insights
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - agrisupply_network
    restart: unless-stopped

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    container_name: agrisupply_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agrisupply_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: agrisupply_backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: agrisupply_insights
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: your_super_secret_jwt_key_change_in_production
      JWT_REFRESH_SECRET: your_super_secret_refresh_jwt_key_change_in_production
      CLIENT_URL: http://localhost:3000
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
    networks:
      - agrisupply_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: agrisupply_frontend
    environment:
      VITE_API_URL: http://localhost:5000/api
      VITE_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - agrisupply_network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: agrisupply_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - agrisupply_network
    restart: unless-stopped
    profiles:
      - production

networks:
  agrisupply_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
